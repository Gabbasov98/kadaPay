let body = document.querySelector("body")

let rowActions = document.querySelectorAll(".row-action")
rowActions.forEach(action => {
    let btn = action.querySelector(".row-action__btn")
    btn.onclick = function () {
        action.classList.toggle("_open")
    }

    document.addEventListener( 'click', (e) => {
        const withinBoundaries = e.composedPath().includes(action);

        if ( ! withinBoundaries ) {
            if(action.classList.contains("_open")){
                action.classList.remove("_open")
            }
        }
    })
})

let passFields = document.querySelectorAll(".fg-pass")

passFields.forEach(field => {
    let input = field.querySelector("input")
    let btn = field.querySelector(".pass-toggle")

    btn.onclick = function () {
        console.log(true)
        if(btn.classList.contains("_active")){
            btn.classList.remove("_active")
            input.setAttribute("type","password")
        }else{
            btn.classList.add("_active")
            input.setAttribute("type","text")
        }
    }
})

let header = document.querySelector(".header")
let toggleMenuButtons = document.querySelectorAll("._toggle-menu")

toggleMenuButtons.forEach(btn => {
    btn.onclick = function () {
        header.classList.toggle("_open")
        body.classList.toggle("fixed-body")
    }
})

function Sliders() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".slider")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)

        SlidersArray[index] = new Swiper(`.slider[data-slider-id="${index}"] .swiper-container`, {
            slidesPerView: "auto",
            spaceBetween: 0,
            watchSlidesProgress: true,
            preventClicks :true,
            a11y: false,
            observer: true,
            observeParents: true,
            observeSlideChildren: true,

            navigation: {
                nextEl: `.slider[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.slider[data-slider-id="${index}"] .swiper-button-prev`,
            },
            pagination: {
                el: `.slider[data-slider-id="${index}"] .swiper-pagination`,
                type: 'bullets',
                clickable: true,
            },
        })
    })
}

function gallery() {
    let SlidersArray = []

    let sliders = document.querySelectorAll(".gallery")
    sliders.forEach((slider,index) => {
        slider.setAttribute("data-slider-id",index)
        let gallery = {
            mySwiper: {},
            mySwiper2: {}
        }

        gallery.mySwiper = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper`, {
            spaceBetween: 0,
            slidesPerView: "auto",
            freeMode: true,
            watchSlidesProgress: true,
            direction: "vertical",
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });
        gallery.mySwiper2 = new Swiper(`.gallery[data-slider-id="${index}"] .mySwiper2`, {
            spaceBetween: 0,
            direction: "vertical",
            loop: true,
            navigation: {
                nextEl: `.gallery[data-slider-id="${index}"] .swiper-button-next`,
                prevEl: `.gallery[data-slider-id="${index}"] .swiper-button-prev`,
            },
            thumbs: {
                swiper:  gallery.mySwiper,
            },
            breakpoints: {
                320: {
                    direction: "horizontal",
                },
                992: {
                    direction: "vertical",
                }
            }
        });

        SlidersArray[index] = gallery
    })

}


Sliders()
gallery()

let filterSelects = document.querySelectorAll(".filter-select")
filterSelects.forEach(select => {
    let current = select.querySelector(".filter-select__current")
    let options = select.querySelectorAll(".filter-select__option input")

    current.onclick = function () {
        select.classList.toggle("_open")
    }


    document.addEventListener( 'click', (e) => {
        const withinBoundaries = e.composedPath().includes(select);

        if ( ! withinBoundaries ) {
            if(select.classList.contains("_open")){
                select.classList.remove("_open")
            }
        }
    })

    options.forEach(option => {
        option.onchange = function () {
            setCurrentValue()
            select.classList.remove("_open")
        }
    })

    function setCurrentValue() {
        let checkedOption = select.querySelector(".filter-select__option input:checked")

        if(!checkedOption){
            current.value = ""
            select.classList.remove("_selected")
            return
        }

        let value = checkedOption.getAttribute("data-value")
        current.value = value
        select.classList.add("_selected")
    }
})

let filterSliders = document.querySelectorAll(".range-block")

filterSliders.forEach(slider => {
    const rangeSlider = slider.querySelector(`.range-slider`)
    const rangeOutput = slider.querySelector(`._output`)

    let startValue = +slider.getAttribute("data-start")
    let min = +slider.getAttribute("data-min")
    let max = +slider.getAttribute("data-max")

    if (rangeSlider) {
        noUiSlider.create(rangeSlider, {
            start: startValue,
            connect: [true,false],
            step: 1,
            range: {
                'min': min,
                'max': max
            }
        });
    }

    let sliderHandle = slider.querySelector(".noUi-handle")
    console.log(sliderHandle)

    rangeSlider.noUiSlider.on('update', function(values, handle) {
        rangeOutput.innerHTML = Math.round(values[handle]).toLocaleString()
        sliderHandle.setAttribute("data-value",Math.round(values[handle]).toLocaleString())
    })
    const setRangeSlider = (i, value) => {
        let array = [null, null];
        array[i] = value;

        rangeSlider.noUiSlider.set(array);
    };
})

let fileInput = document.querySelector("[data-upload-id='file-input']")

if(fileInput){
    console.log(fileInput)
    const upload = new FileUploadWithPreview.FileUploadWithPreview('file-input');

    upload.options.multiple = true

    $(document).on('change', '.input-container input', function(e) {
        $(this).parents(".file-input").addClass("_uploaded")
    })

    $(document).on('click', '.image-preview-item-clear', function(e) {
        let count = $(this).parents(".file-input").find(".image-preview-item").length
        if(count === 1){
            $(this).parents(".file-input").removeClass("_uploaded")
        }
    })
}



let modalTogglers = document.querySelectorAll("[data-modal]")
let modals = document.querySelectorAll(".modal")

modalTogglers.forEach(el => {
    el.onclick = function () {
        let modalId = el.getAttribute("data-modal")
        openModal(modalId)
    }
})

function closeModals() {
    modals.forEach(modal => {
        modal.classList.remove("_active")
        body.classList.remove("fixed-body2")
    })
}

function openModal(modalId) {
    closeModals()
    let modal = document.querySelector(`#${modalId}`)
    let closeButtons = modal.querySelectorAll(`._close-modal`)

    modal.classList.add("_active")
    body.classList.add("fixed-body2")


    closeButtons.forEach(btn => {
        btn.onclick = ()=> {
            modal.classList.remove("_active")
            body.classList.remove("fixed-body2")
        }
    })
}

var getScrollBarSize = (function() {
    var el = window.document.createElement('textarea'), style = {
        'visibility': 'hidden', 'position': 'absolute', 'zIndex': '-2147483647',
        'top': '-1000px', 'left': '-1000px', 'width': '1000px', 'height': '1000px',
        'overflow': 'scroll', 'margin': '0', 'border': '0', 'padding': '0'
    }, support = el.clientWidth !== undefined && el.offsetWidth !== undefined;

    for (var key in style) {
        if (style.hasOwnProperty(key)) {
            el.style[key] = style[key];
        }
    }

    return function() {
        var size = null;
        if (support && window.document.body) {
            window.document.body.appendChild(el);
            size = [el.offsetWidth - el.clientWidth, el.offsetHeight - el.clientHeight];
            window.document.body.removeChild(el);
        }

        document.documentElement.style.setProperty('--scrollWidth', `${size[0]}px`);
        return size;
    };
})();


window.addEventListener('DOMContentLoaded', () => {
    fix100vh();
    window.addEventListener('resize', () => {
        fix100vh();
        getScrollBarSize()
    })

    getScrollBarSize()

    let localeRu = {
        days: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
        daysShort: ['Вос', 'Пон', 'Вто', 'Сре', 'Чет', 'Пят', 'Суб'],
        daysMin: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
        months: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
        monthsShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],
        today: 'Сегодня',
        clear: 'Очистить',
        dateFormat: 'dd.MM.yyyy',
        timeFormat: 'HH:mm',
        firstDay: 1
    };

    function parseDate(input) {
        if(!input){
            return ''
        }
        let parts = input.match(/(\d+)/g);
        return new Date(parts[2], parts[1]-1, parts[0]);
    }

    let dateInputs = document.querySelectorAll('.date-input input')
    dateInputs.forEach(el => {
        new AirDatepicker(el, {
            locale: localeRu,
            autoClose: true,
            selectedDates: [parseDate(el.value)],
            onSelect: () => {
                $(".date-input").addClass("input-active")
            }
        })
    })
})

function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

//# sourceMappingURL=../sourcemaps/main.min.js.map
